@page "/"
@inject JobsService JobsService
@inject WebSocketsService WebSocketsService

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" style="display:flex;gap:1rem;padding:0;">
    <MudTextField Label="Duration" @bind-Value="@_duration" />
    <MudButton style="align-self: flex-end;" Variant="Variant.Outlined" OnClick="AddJob" Color="Color.Success">Add a job</MudButton>
</MudContainer>
<JobsList Jobs="_jobs" />
<MudButton OnClick="RunJobs" Variant="Variant.Outlined" Color="Color.Success">Run all jobs</MudButton>

@code {
    private int _duration = 1000;
    private List<ClassLibraryJobs.Job> _jobs = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await WebSocketsService.Connect("ws://localhost:7034/ws");
            await Task.Run(ReceiveMessages);
            Console.WriteLine("WebSocket connected.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"WebSocket connection error: {ex.Message}");
        }
    }

    private async Task AddJob()
    {
        await WebSocketsService.AddJob(_duration);
    }

    private async Task RunJobs()
    {
        List<ClassLibraryJobs.Job> jobs = JobsService.GetJobs();
        foreach (var job in jobs)
        {
            if (job.GetStatus() == JobStatus.Pending)
            {
                await WebSocketsService.StartJob(job.GetId());
            }
        }
    }

    private async Task ReceiveMessages()
    {
        while (true)
        {
            string message = await WebSocketsService.ReceiveMessage();
            if (message.StartsWith("JobAdded"))
            {
                string id = message.Split(':')[1];
                JobsService.AddJob(new ClassLibraryJobs.Job(id, _duration, JobStatus.Pending));
                StateHasChanged();
            }
            else if (message.StartsWith("JobStarted"))
            {
                string id = message.Split(':')[1];
                JobsService.ModifyJob(id, JobStatus.Running);
                StateHasChanged();
            }
            else if (message.StartsWith("JobCompleted"))
            {
                string id = message.Split(':')[1];
                JobsService.ModifyJob(id, JobStatus.Complete);
                StateHasChanged();
            }
            else if (message.StartsWith("JobCancelled"))
            {
                string id = message.Split(':')[1];
                JobsService.ModifyJob(id, JobStatus.Cancelled);
                StateHasChanged();
            }
        }
    }
}